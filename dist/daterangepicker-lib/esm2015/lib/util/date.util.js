/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class DateUtil {
    // static getStartTime(duration: string) {
    //   let startTime: number = moment.utc().startOf(duration)[this.dateTimeString].getTime();
    //   let timeRange = localStorage.getItem('timeRange');
    //   if (timeRange && parseInt(timeRange) > 0) {
    //     startTime = DateUtil.getStartTimeFromTimeRange(timeRange, duration);
    //   }
    //   return startTime;
    // }
    // static getEndTime(duration: string) {
    //   let endTime: number = moment.utc().endOf(duration)[this.dateTimeString].getTime();
    //   let timeRange = localStorage.getItem('timeRange');
    //   if (timeRange && parseInt(timeRange) > 0) {
    //     endTime = DateUtil.getEndTimeFromTimeRange(timeRange, duration);
    //   }
    //   return endTime;
    // }
    /**
     * @param {?} time
     * @return {?}
     */
    static getEpochTimeInSeconds(time) {
        return Math.floor(time / 1000);
    }
}
DateUtil.dateTimeString = '_d';
DateUtil.monthList = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
DateUtil.milisInSecond = 1000;
DateUtil.milisInMinute = 60 * 1000;
DateUtil.milisInHour = 3600 * 1000;
DateUtil.milisInDay = 24 * 3600 * 1000;
DateUtil.milisInMonth = 30 * 24 * 3600 * 1000;
DateUtil.DATE_FORMAT_DD_MMM_YYYY = 'DD MMM YYYY';
DateUtil.DATE_FORMAT_dd_MMM_yyyy = 'dd MMM yyyy';
DateUtil.DATE_FORMAT_EEE_dd_MMM_yyyy = 'EEE, dd MMM yyyy';
DateUtil.DATE_FORMAT_dd_MMM = 'dd MMM';
DateUtil.DATE_FORMAT_DD_MMM = 'DD MMM';
DateUtil.DATE_FORMAT_hh_mm_A = 'hh:mm A';
DateUtil.DATE_FORMAT_hh_mm_a = 'hh:mm a';
DateUtil.DATE_FORMAT_MMM = 'MMM';
DateUtil.DATE_RANGE = {
    WEEK: 'Week',
    MONTH: 'Month',
    QUARTER: 'Quarter'
};
if (false) {
    /** @type {?} */
    DateUtil.dateTimeString;
    /**
     * @type {?}
     * @private
     */
    DateUtil.monthList;
    /** @type {?} */
    DateUtil.milisInSecond;
    /** @type {?} */
    DateUtil.milisInMinute;
    /** @type {?} */
    DateUtil.milisInHour;
    /** @type {?} */
    DateUtil.milisInDay;
    /** @type {?} */
    DateUtil.milisInMonth;
    /** @type {?} */
    DateUtil.DATE_FORMAT_DD_MMM_YYYY;
    /** @type {?} */
    DateUtil.DATE_FORMAT_dd_MMM_yyyy;
    /** @type {?} */
    DateUtil.DATE_FORMAT_EEE_dd_MMM_yyyy;
    /** @type {?} */
    DateUtil.DATE_FORMAT_dd_MMM;
    /** @type {?} */
    DateUtil.DATE_FORMAT_DD_MMM;
    /** @type {?} */
    DateUtil.DATE_FORMAT_hh_mm_A;
    /** @type {?} */
    DateUtil.DATE_FORMAT_hh_mm_a;
    /** @type {?} */
    DateUtil.DATE_FORMAT_MMM;
    /** @type {?} */
    DateUtil.DATE_RANGE;
}
//# sourceMappingURL=data:application/json;base64,